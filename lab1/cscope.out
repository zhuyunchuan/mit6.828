cscope 15 $HOME/mit6.828/lab -q 0000000830 0000054535
	@boot/main.c

1 
	~<öc/x86.h
>

2 
	~<öc/ñf.h
>

32 
	#SECTSIZE
 512

	)

33 
	#ELFHDR
 ((
Elf
 *) 0x10000)

34 

	)

35 
ªad£˘
(*, 
uöt32_t
);

36 
ªad£g
(
uöt32_t
, uint32_t, uint32_t);

38 
	$boŸmaö
()

40 
Proghdr
 *
ph
, *
ïh
;

43 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

46 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
)

47 
bad
;

50 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

51 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

52 ; 
ph
 < 
ïh
;Öh++)

53 
	`ªad£g
(
ph
->
p_va
,Öh->
p_memsz
,Öh->
p_off£t
);

57 (((*)()Ë(
ELFHDR
->
e_íåy
 & 0xFFFFFF))();

59 
bad
:

60 
	`outw
(0x8A00, 0x8A00);

61 
	`outw
(0x8A00, 0x8E00);

64 
	}
}

68 
	$ªad£g
(
uöt32_t
 
va
, uöt32_à
cou¡
, uöt32_à
off£t
)

70 
uöt32_t
 
íd_va
;

72 
va
 &= 0xFFFFFF;

73 
íd_va
 = 
va
 + 
cou¡
;

76 
va
 &~(
SECTSIZE
 - 1);

79 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

84 
va
 < 
íd_va
) {

85 
	`ªad£˘
((
uöt8_t
*Ë
va
, 
off£t
);

86 
va
 +
SECTSIZE
;

87 
off£t
++;

89 
	}
}

91 
	$waôdisk
()

94 (
	`öb
(0x1F7) & 0xC0) != 0x40)

96 
	}
}

97 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

100 
	`waôdisk
();

102 
	`outb
(0x1F2, 1);

103 
	`outb
(0x1F3, 
off£t
);

104 
	`outb
(0x1F4, 
off£t
 >> 8);

105 
	`outb
(0x1F5, 
off£t
 >> 16);

106 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

107 
	`outb
(0x1F7, 0x20);

110 
	`waôdisk
();

113 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

114 
	}
}

	@inc/assert.h

3 #i‚de‡
JOS_INC_ASSERT_H


4 
	#JOS_INC_ASSERT_H


	)

6 
	~<öc/°dio.h
>

8 
_w¨n
(const *, , const *, ...);

9 
	$_∑nic
(c⁄° *, , c⁄° *, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
	#w¨n
(...Ë
	`_w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...Ë
	`_∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

14 
	#as£π
(
x
) \

15 dÿ{ i‡(!(
x
)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

18 
	#°©ic_as£π
(
x
ËxË0: (x):

	)

	@inc/elf.h

1 
	#JOS_INC_ELF_H


	)

3 
	#ELF_MAGIC
 0x464C457FU

	)

5 
	sElf
 {

6 
uöt32_t
 
	me_magic
;

7 
uöt8_t
 
	me_ñf
[12];

8 
uöt16_t
 
	me_ty≥
;

9 
uöt16_t
 
	me_machöe
;

10 
uöt32_t
 
	me_vîsi⁄
;

11 
uöt32_t
 
	me_íåy
;

12 
uöt32_t
 
	me_phoff
;

13 
uöt32_t
 
	me_shoff
;

14 
uöt32_t
 
	me_Êags
;

15 
uöt16_t
 
	me_ehsize
;

16 
uöt16_t
 
	me_phítsize
;

17 
uöt16_t
 
	me_phnum
;

18 
uöt16_t
 
	me_shítsize
;

19 
uöt16_t
 
	me_shnum
;

20 
uöt16_t
 
	me_sh°∫dx
;

23 
	sProghdr
 {

24 
uöt32_t
 
	mp_ty≥
;

25 
uöt32_t
 
	mp_off£t
;

26 
uöt32_t
 
	mp_va
;

27 
uöt32_t
 
	mp_∑
;

28 
uöt32_t
 
	mp_fûesz
;

29 
uöt32_t
 
	mp_memsz
;

30 
uöt32_t
 
	mp_Êags
;

31 
uöt32_t
 
	mp_Æign
;

34 
	sSe˘hdr
 {

35 
uöt32_t
 
	msh_«me
;

36 
uöt32_t
 
	msh_ty≥
;

37 
uöt32_t
 
	msh_Êags
;

38 
uöt32_t
 
	msh_addr
;

39 
uöt32_t
 
	msh_off£t
;

40 
uöt32_t
 
	msh_size
;

41 
uöt32_t
 
	msh_lök
;

42 
uöt32_t
 
	msh_öfo
;

43 
uöt32_t
 
	msh_addølign
;

44 
uöt32_t
 
	msh_ítsize
;

48 
	#ELF_PROG_LOAD
 1

	)

51 
	#ELF_PROG_FLAG_EXEC
 1

	)

52 
	#ELF_PROG_FLAG_WRITE
 2

	)

53 
	#ELF_PROG_FLAG_READ
 4

	)

56 
	#ELF_SHT_NULL
 0

	)

57 
	#ELF_SHT_PROGBITS
 1

	)

58 
	#ELF_SHT_SYMTAB
 2

	)

59 
	#ELF_SHT_STRTAB
 3

	)

62 
	#ELF_SHN_UNDEF
 0

	)

	@inc/error.h

3 #i‚de‡
JOS_INC_ERROR_H


4 
	#JOS_INC_ERROR_H


	)

7 
	#E_UNSPECIFIED
 1

8 
	#E_BAD_ENV
 2

10 
	#E_INVAL
 3

11 
	#E_NO_MEM
 4

12 
	#E_NO_FREE_ENV
 5

14 
	#E_FAULT
 6

15 

	)

16 
	#MAXERROR
 6

	)

	@inc/kbdreg.h

1 #i‚de‡
JOS_KBDREG_H


2 
	#JOS_KBDREG_H


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

	)

20 
	#KBS_DIB
 0x01

	)

21 
	#KBS_IBF
 0x02

	)

22 
	#KBS_WARM
 0x04

	)

23 
	#KBS_OCMD
 0x08

	)

24 
	#KBS_NOSEC
 0x10

	)

25 
	#KBS_TERR
 0x20

	)

26 
	#KBS_RERR
 0x40

	)

27 
	#KBS_PERR
 0x80

	)

29 
	#KBCMDP
 0x64

	)

30 
	#KBC_RAMREAD
 0x20

	)

31 
	#KBC_RAMWRITE
 0x60

	)

32 
	#KBC_AUXDISABLE
 0xa7

	)

33 
	#KBC_AUXENABLE
 0xa8

	)

34 
	#KBC_AUXTEST
 0xa9

	)

35 
	#KBC_KBDECHO
 0xd2

	)

36 
	#KBC_AUXECHO
 0xd3

	)

37 
	#KBC_AUXWRITE
 0xd4

	)

38 
	#KBC_SELFTEST
 0xØ

	)

39 
	#KBC_KBDTEST
 0xab

	)

40 
	#KBC_KBDDISABLE
 0xad

	)

41 
	#KBC_KBDENABLE
 0x´

	)

42 
	#KBC_PULSE0
 0x„

	)

43 
	#KBC_PULSE1
 0xfd

	)

44 
	#KBC_PULSE2
 0xfb

	)

45 
	#KBC_PULSE3
 0xf7

	)

47 
	#KBDATAP
 0x60

	)

48 
	#KBOUTP
 0x60

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

	)

54 
	#KC8_MDISABLE
 0x20

	)

55 
	#KC8_KDISABLE
 0x10

	)

56 
	#KC8_IGNSEC
 0x08

	)

57 
	#KC8_CPU
 0x04

	)

58 
	#KC8_MENABLE
 0x02

	)

59 
	#KC8_KENABLE
 0x01

	)

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

	)

64 
	#KBC_RESEND
 0xFE

	)

65 
	#KBC_SETDEFAULT
 0xF6

	)

66 
	#KBC_DISABLE
 0xF5

	)

67 
	#KBC_ENABLE
 0xF4

	)

68 
	#KBC_TYPEMATIC
 0xF3

	)

69 
	#KBC_SETTABLE
 0xF0

	)

70 
	#KBC_MODEIND
 0xED

	)

71 
	#KBC_ECHO
 0xEE

	)

74 
	#KBR_EXTENDED
 0xE0

	)

75 
	#KBR_RESEND
 0xFE

	)

76 
	#KBR_ACK
 0xFA

	)

77 
	#KBR_OVERRUN
 0x00

	)

78 
	#KBR_FAILURE
 0xFD

	)

79 
	#KBR_BREAK
 0xF0

	)

80 
	#KBR_RSTDONE
 0xAA

	)

81 
	#KBR_ECHO
 0xEE

	)

	@inc/malloc.h

1 #i‚de‡
JOS_INC_MALLOC_H


2 
	#JOS_INC_MALLOC_H
 1

	)

4 *
mÆloc
(
size_t
 
size
);

5 
‰ì
(*
addr
);

	@inc/memlayout.h

1 #i‚de‡
JOS_INC_MEMLAYOUT_H


2 
	#JOS_INC_MEMLAYOUT_H


	)

4 #i‚de‡
__ASSEMBLER__


5 
	~<öc/ty≥s.h
>

6 
	~<öc/queue.h
>

7 
	~<öc/mmu.h
>

16 
	#GD_KT
 0x08

17 
	#GD_KD
 0x10

18 
	#GD_UT
 0x18

19 
	#GD_UD
 0x20

20 
	#GD_TSS
 0x28

21 

	)

82 
	#KERNBASE
 0xF0000000

	)

87 
	#IOPHYSMEM
 0x0A0000

	)

88 
	#EXTPHYSMEM
 0x100000

	)

94 
	#VPT
 (
KERNBASE
 - 
PTSIZE
)

	)

95 
	#KSTACKTOP
 
VPT


	)

96 
	#KSTKSIZE
 (8*
PGSIZE
)

97 
	#ULIM
 (
KSTACKTOP
 - 
PTSIZE
)

	)

105 
	#UVPT
 (
ULIM
 - 
PTSIZE
)

	)

107 
	#UPAGES
 (
UVPT
 - 
PTSIZE
)

	)

109 
	#UENVS
 (
UPAGES
 - 
PTSIZE
)

	)

116 
	#UTOP
 
UENVS


	)

118 
	#UXSTACKTOP
 
UTOP


	)

121 
	#USTACKTOP
 (
UTOP
 - 2*
PGSIZE
)

	)

124 
	#UTEXT
 (2*
PTSIZE
)

	)

127 
	#UTEMP
 ((*Ë
PTSIZE
)

	)

130 
	#PFTEMP
 (
UTEMP
 + 
PTSIZE
 - 
PGSIZE
)

	)

132 
	#USTABDATA
 (
PTSIZE
 / 2)

	)

135 #i‚de‡
__ASSEMBLER__


151 
uöt32_t
 
	t±e_t
;

152 
uöt32_t
 
	tpde_t
;

154 vﬁ©ûê
±e_t
 
v±
[];

155 vﬁ©ûê
pde_t
 
vpd
[];

166 
LIST_HEAD
(
Page_li°
, 
Page
);

167 
	$LIST_ENTRY
(
	tPage
Ë
	tPage_LIST_íåy_t
;

169 
	sPage
 {

170 
Page_LIST_íåy_t
 
µ_lök
;

177 
uöt16_t
 
µ_ªf
;

	@inc/mmu.h

1 #i‚de‡
JOS_INC_MMU_H


2 
	#JOS_INC_MMU_H


	)

30 
	#PPN
(
œ
Ë(((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
)

	)

31 
	#VPN
(
œ
Ë
	`PPN
(la)

32 

	)

34 
	#PDX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

35 
	#VPD
(
œ
Ë
	`PDX
(la)

36 

	)

38 
	#PTX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

41 
	#PGOFF
(
œ
Ë(((
uöçå_t
Ë÷a)Ë& 0xFFF)

	)

44 
	#PGADDR
(
d
, 
t
, 
o
Ë((*Ë((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

47 
	#NPDENTRIES
 1024

48 
	#NPTENTRIES
 1024

49 

	)

50 
	#PGSIZE
 4096

51 
	#PGSHIFT
 12

52 

	)

53 
	#PTSIZE
 (
PGSIZE
*
NPTENTRIES
)

54 
	#PTSHIFT
 22

55 

	)

56 
	#PTXSHIFT
 12

57 
	#PDXSHIFT
 22

58 

	)

60 
	#PTE_P
 0x001

61 
	#PTE_W
 0x002

62 
	#PTE_U
 0x004

63 
	#PTE_PWT
 0x008

64 
	#PTE_PCD
 0x010

65 
	#PTE_A
 0x020

66 
	#PTE_D
 0x040

67 
	#PTE_PS
 0x080

68 
	#PTE_MBZ
 0x180

69 

	)

72 
	#PTE_AVAIL
 0xE00

73 

	)

75 
	#PTE_USER
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

78 
	#PTE_ADDR
(
±e
Ë((
phyßddr_t
Ë’ãË& ~0xFFF)

	)

81 
	#CR0_PE
 0x00000001

82 
	#CR0_MP
 0x00000002

83 
	#CR0_EM
 0x00000004

84 
	#CR0_TS
 0x00000008

85 
	#CR0_ET
 0x00000010

86 
	#CR0_NE
 0x00000020

87 
	#CR0_WP
 0x00010000

88 
	#CR0_AM
 0x00040000

89 
	#CR0_NW
 0x20000000

90 
	#CR0_CD
 0x40000000

91 
	#CR0_PG
 0x80000000

92 

	)

93 
	#CR4_PCE
 0x00000100

94 
	#CR4_MCE
 0x00000040

95 
	#CR4_PSE
 0x00000010

96 
	#CR4_DE
 0x00000008

97 
	#CR4_TSD
 0x00000004

98 
	#CR4_PVI
 0x00000002

99 
	#CR4_VME
 0x00000001

100 

	)

102 
	#FL_CF
 0x00000001

103 
	#FL_PF
 0x00000004

104 
	#FL_AF
 0x00000010

105 
	#FL_ZF
 0x00000040

106 
	#FL_SF
 0x00000080

107 
	#FL_TF
 0x00000100

108 
	#FL_IF
 0x00000200

109 
	#FL_DF
 0x00000400

110 
	#FL_OF
 0x00000800

111 
	#FL_IOPL_MASK
 0x00003000

112 
	#FL_IOPL_0
 0x00000000

113 
	#FL_IOPL_1
 0x00001000

114 
	#FL_IOPL_2
 0x00002000

115 
	#FL_IOPL_3
 0x00003000

116 
	#FL_NT
 0x00004000

117 
	#FL_RF
 0x00010000

118 
	#FL_VM
 0x00020000

119 
	#FL_AC
 0x00040000

120 
	#FL_VIF
 0x00080000

121 
	#FL_VIP
 0x00100000

122 
	#FL_ID
 0x00200000

123 

	)

125 
	#FEC_PR
 0x1

126 
	#FEC_WR
 0x2

127 
	#FEC_U
 0x4

128 

	)

136 #ifde‡
__ASSEMBLER__


141 
	#SEG_NULL
 \

142 .
w‹d
 0, 0; \

143 .
byã
 0, 0, 0, 0

	)

144 
	#SEG
(
ty≥
,
ba£
,
lim
) \

145 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

146 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

147 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

151 
	~<öc/ty≥s.h
>

154 
	sSegdesc
 {

155 
	msd_lim_15_0
 : 16;

156 
	msd_ba£_15_0
 : 16;

157 
	msd_ba£_23_16
 : 8;

158 
	msd_ty≥
 : 4;

159 
	msd_s
 : 1;

160 
	msd_d∂
 : 2;

161 
	msd_p
 : 1;

162 
	msd_lim_19_16
 : 4;

163 
	msd_avl
 : 1;

164 
	msd_rsv1
 : 1;

165 
	msd_db
 : 1;

166 
	msd_g
 : 1;

167 
	msd_ba£_31_24
 : 8;

170 
	#SEG_NULL
 (
Segdesc
){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	)

172 
	#SEG_FAULT
 (
Segdesc
){ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 }

	)

174 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

175 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

176 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 0, 1, 1, \

177 (Ë(
ba£
Ë>> 24 }

	)

178 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

179 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

180 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 16, 0, 0, 1, 0, \

181 (Ë(
ba£
Ë>> 24 }

	)

186 
	#STA_X
 0x8

187 
	#STA_E
 0x4

188 
	#STA_C
 0x4

189 
	#STA_W
 0x2

190 
	#STA_R
 0x2

191 
	#STA_A
 0x1

192 

	)

194 
	#STS_T16A
 0x1

195 
	#STS_LDT
 0x2

196 
	#STS_T16B
 0x3

197 
	#STS_CG16
 0x4

198 
	#STS_TG
 0x5

199 
	#STS_IG16
 0x6

200 
	#STS_TG16
 0x7

201 
	#STS_T32A
 0x9

202 
	#STS_T32B
 0xB

203 
	#STS_CG32
 0xC

204 
	#STS_IG32
 0xE

205 
	#STS_TG32
 0xF

206 

	)

214 #i‚de‡
__ASSEMBLER__


217 
	sTask°©e
 {

218 
uöt32_t
 
	mts_lök
;

219 
uöçå_t
 
	mts_e•0
;

220 
uöt16_t
 
	mts_ss0
;

221 
uöt16_t
 
	mts_∑ddög1
;

222 
uöçå_t
 
	mts_e•1
;

223 
uöt16_t
 
	mts_ss1
;

224 
uöt16_t
 
	mts_∑ddög2
;

225 
uöçå_t
 
	mts_e•2
;

226 
uöt16_t
 
	mts_ss2
;

227 
uöt16_t
 
	mts_∑ddög3
;

228 
phyßddr_t
 
	mts_¸3
;

229 
uöçå_t
 
	mts_eù
;

230 
uöt32_t
 
	mts_eÊags
;

231 
uöt32_t
 
	mts_óx
;

232 
uöt32_t
 
	mts_ecx
;

233 
uöt32_t
 
	mts_edx
;

234 
uöt32_t
 
	mts_ebx
;

235 
uöçå_t
 
	mts_e•
;

236 
uöçå_t
 
	mts_ebp
;

237 
uöt32_t
 
	mts_esi
;

238 
uöt32_t
 
	mts_edi
;

239 
uöt16_t
 
	mts_es
;

240 
uöt16_t
 
	mts_∑ddög4
;

241 
uöt16_t
 
	mts_cs
;

242 
uöt16_t
 
	mts_∑ddög5
;

243 
uöt16_t
 
	mts_ss
;

244 
uöt16_t
 
	mts_∑ddög6
;

245 
uöt16_t
 
	mts_ds
;

246 
uöt16_t
 
	mts_∑ddög7
;

247 
uöt16_t
 
	mts_fs
;

248 
uöt16_t
 
	mts_∑ddög8
;

249 
uöt16_t
 
	mts_gs
;

250 
uöt16_t
 
	mts_∑ddög9
;

251 
uöt16_t
 
	mts_ldt
;

252 
uöt16_t
 
	mts_∑ddög10
;

253 
uöt16_t
 
	mts_t
;

254 
uöt16_t
 
	mts_iomb
;

258 
	sG©edesc
 {

259 
	mgd_off_15_0
 : 16;

260 
	mgd_ss
 : 16;

261 
	mgd_¨gs
 : 5;

262 
	mgd_rsv1
 : 3;

263 
	mgd_ty≥
 : 4;

264 
	mgd_s
 : 1;

265 
	mgd_d∂
 : 2;

266 
	mgd_p
 : 1;

267 
	mgd_off_31_16
 : 16;

277 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) \

279 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

280 (
g©e
).
gd_ss
 = (
£l
); \

281 (
g©e
).
gd_¨gs
 = 0; \

282 (
g©e
).
gd_rsv1
 = 0; \

283 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

284 (
g©e
).
gd_s
 = 0; \

285 (
g©e
).
gd_d∂
 = (
d∂
); \

286 (
g©e
).
gd_p
 = 1; \

287 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

288 }

	)

291 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) \

293 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

294 (
g©e
).
gd_ss
 = (
ss
); \

295 (
g©e
).
gd_¨gs
 = 0; \

296 (
g©e
).
gd_rsv1
 = 0; \

297 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

298 (
g©e
).
gd_s
 = 0; \

299 (
g©e
).
gd_d∂
 = (
d∂
); \

300 (
g©e
).
gd_p
 = 1; \

301 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

302 }

	)

305 
	sP£udodesc
 {

306 
uöt16_t
 
	mpd_lim
;

307 
uöt32_t
 
	mpd_ba£
;

308 } 
__©åibuã__
 ((
∑cked
));

	@inc/queue.h

35 #i‚de‡
JOS_INC_QUEUE_H


36 
	#JOS_INC_QUEUE_H


	)

52 
	sFrob


54 
	m‰obozz
;

55 
LIST_ENTRY
(
Frob
Ë
	m‰ob_lök
;

58 
	$LIST_HEAD
(
Frob_li°
, 
Frob
)

60 
Frob_li°
 
Êi°
;

62 
	`LIST_INIT
(&
Êi°
);

63 
Êi°
 = 
	`LIST_HEAD_INITIALIZER
(&flist);

65 if(
	$LIST_EMPTY
(&
Êi°
))

66 
	`¥ötf
("list isÉmpty\n");

68 
Frob
 *
f
 = 
	`LIST_FIRST
(&
Êi°
);

69 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

70 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

72 
f
=
	`LIST_FIRST
(&
Êi°
); f != 0;

73 
f
 = 
	$LIST_NEXT
(
f
, 
‰ob_lök
))

74 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

76 
	$LIST_FOREACH
(
f
, &
Êi°
, 
‰ob_lök
)

77 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

79 
f
 = 
	`LIST_NEXT
(
	`LIST_FIRST
(&
Êi°
));

80 
	`LIST_INSERT_AFTER
(
f
, 
g
, 
‰ob_lök
);

81 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

82 
	`LIST_INSERT_BEFORE
(
f
, 
g
, 
‰ob_lök
);

83 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

84 
	`LIST_INSERT_HEAD
(&
Êi°
, 
g
, 
‰ob_lök
);

109 
	#LIST_HEAD
(
«me
, 
ty≥
) \

110 
	s«me
 { \

111 
ty≥
 *
lh_fú°
; \

112 }

	)

118 
	#LIST_HEAD_INITIALIZER
(
hód
) \

119 { 
NULL
 
	}

	)
}

129 
	#LIST_ENTRY
(
ty≥
) \

131 
ty≥
 *
À_√xt
; \

132 
ty≥
 **
À_¥ev
; \

133 }

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

147 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

153 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

160 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

161 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

162 (
v¨
); \

163 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

168 
	#LIST_INIT
(
hód
) do { \

169 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

170 } 0)

	)

177 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

178 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

179 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

180 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

181 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

182 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

183 } 0)

	)

190 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

191 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

192 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

193 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

194 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

195 } 0)

	)

201 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

202 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

203 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

204 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

205 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

206 } 0)

	)

212 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

213 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

214 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

215 (
ñm
)->
fõld
.
À_¥ev
; \

216 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

217 } 0)

	)

	@inc/stab.h

1 #i‚de‡
JOS_STAB_H


2 
	#JOS_STAB_H


	)

3 
	~<öc/ty≥s.h
>

15 
	#N_GSYM
 0x20

16 
	#N_FNAME
 0x22

17 
	#N_FUN
 0x24

18 
	#N_STSYM
 0x26

19 
	#N_LCSYM
 0x28

20 
	#N_MAIN
 0x2a

21 
	#N_PC
 0x30

22 
	#N_RSYM
 0x40

23 
	#N_SLINE
 0x44

24 
	#N_DSLINE
 0x46

25 
	#N_BSLINE
 0x48

26 
	#N_SSYM
 0x60

27 
	#N_SO
 0x64

28 
	#N_LSYM
 0x80

29 
	#N_BINCL
 0x82

30 
	#N_SOL
 0x84

31 
	#N_PSYM
 0xa0

32 
	#N_EINCL
 0xa2

33 
	#N_ENTRY
 0xa4

34 
	#N_LBRAC
 0xc0

35 
	#N_EXCL
 0xc2

36 
	#N_RBRAC
 0xe0

37 
	#N_BCOMM
 0xe2

38 
	#N_ECOMM
 0xe4

39 
	#N_ECOML
 0xe8

40 
	#N_LENG
 0xfe

41 

	)

43 
	sSèb
 {

44 
uöt32_t
 
	mn_°rx
;

45 
uöt8_t
 
	mn_ty≥
;

46 
uöt8_t
 
	mn_Ÿhî
;

47 
uöt16_t
 
	mn_desc
;

48 
uöçå_t
 
	mn_vÆue
;

	@inc/stdarg.h

3 #i‚de‡
JOS_INC_STDARG_H


4 
	#JOS_INC_STDARG_H


	)

6 *
	tva_li°
;

8 
	#__va_size
(
ty≥
) \

9 ((((
ty≥
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

11 
	#va_°¨t
(
≠
, 
œ°
) \

12 ((
≠
Ë(
va_li°
)&(
œ°
Ë+ 
	`__va_size
÷a°))

	)

14 
	#va_¨g
(
≠
, 
ty≥
) \

15 (*(
ty≥
 *)((
≠
Ë+
	`__va_size
—y≥), (≠Ë- __va_size—y≥)))

	)

17 
	#va_íd
(
≠
Ë(()0)

	)

	@inc/stdio.h

1 #i‚de‡
JOS_INC_STDIO_H


2 
	#JOS_INC_STDIO_H


	)

4 
	~<öc/°d¨g.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*Ë0)

	)

11 
˝utch¨
(
c
);

12 
gëch¨
();

13 
isc⁄s
(
fd
);

16 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

17 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
);

18 
	`¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, ...);

19 
	`v¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, 
va_li°
);

22 
	`˝rötf
(c⁄° *
fmt
, ...);

23 
	`v˝rötf
(c⁄° *
fmt
, 
va_li°
);

26 
	`¥ötf
(c⁄° *
fmt
, ...);

27 
	`Ârötf
(
fd
, c⁄° *
fmt
, ...);

28 
	`vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
);

31 * 
	`ªadlöe
(c⁄° *
¥om±
);

	@inc/string.h

1 #i‚de‡
JOS_INC_STRING_H


2 
	#JOS_INC_STRING_H


	)

4 
	~<öc/ty≥s.h
>

6 
°æí
(c⁄° *
s
);

7 
°∫Àn
(c⁄° *
s
, 
size_t
 
size
);

8 * 
°r˝y
(*
d°
, c⁄° *
§c
);

9 * 
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

10 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

11 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

12 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
size
);

13 * 
°rchr
(c⁄° *
s
, 
c
);

14 * 
°rföd
(c⁄° *
s
, 
c
);

16 * 
mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

18 * 
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

19 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

20 * 
memföd
(c⁄° *
s
, 
c
, 
size_t
 
Àn
);

22 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

	@inc/types.h

1 #i‚de‡
JOS_INC_TYPES_H


2 
	#JOS_INC_TYPES_H


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*Ë0)

	)

9 
	tboﬁ
;

12 
__sig√d
 
	töt8_t
;

13 
	tuöt8_t
;

14 
	töt16_t
;

15 
	tuöt16_t
;

16 
	töt32_t
;

17 
	tuöt32_t
;

18 
	töt64_t
;

19 
	tuöt64_t
;

25 
öt32_t
 
	töçå_t
;

26 
uöt32_t
 
	tuöçå_t
;

27 
uöt32_t
 
	tphyßddr_t
;

30 
uöt32_t
 
	tµn_t
;

33 
uöt32_t
 
	tsize_t
;

36 
öt32_t
 
	tssize_t
;

39 
öt32_t
 
	toff_t
;

42 
	#MIN
(
_a
, 
_b
) \

44 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

45 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

46 
__a
 <
__b
 ? __a : __b; \

47 })

	)

48 
	#MAX
(
_a
, 
_b
) \

50 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

51 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

52 
__a
 >
__b
 ? __a : __b; \

53 })

	)

57 
	#ROUNDDOWN
(
a
, 
n
) \

59 
uöt32_t
 
__a
 = (uöt32_tË(
a
); \

60 (
	`ty≥of
(
a
)Ë(
__a
 - __®% (
n
)); \

61 })

	)

63 
	#ROUNDUP
(
a
, 
n
) \

65 
uöt32_t
 
__n
 = (uöt32_tË(
n
); \

66 (
	`ty≥of
(
a
)Ë(
	`ROUNDDOWN
((
uöt32_t
Ë◊Ë+ 
__n
 - 1, __n)); \

67 })

	)

70 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë(&(—y≥*)0)->membî))

	)

	@inc/x86.h

1 #i‚de‡
JOS_INC_X86_H


2 
	#JOS_INC_X86_H


	)

4 
	~<öc/ty≥s.h
>

6 
__ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

7 
__ölöe
 
uöt8_t
 
	$öb
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

8 
__ölöe
 
	$ösb
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
__ölöe
 
uöt16_t
 
	$öw
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
__ölöe
 
	$ösw
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
__ölöe
 
uöt32_t
 
	$öl
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
__ölöe
 
	$ö¶
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
__ölöe
 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
__ölöe
 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
__ölöe
 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
__ölöe
 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
__ölöe
 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
__ölöe
 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
__ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
__ölöe
 
	$lidt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
__ölöe
 
	$Œdt
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
__ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
__ölöe
 
	$l¸0
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
__ölöe
 
uöt32_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
__ölöe
 
uöt32_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
__ölöe
 
	$l¸3
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
__ölöe
 
uöt32_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
__ölöe
 
	$l¸4
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
__ölöe
 
uöt32_t
 
	$r¸4
(Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
__ölöe
 
	$ébÊush
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
__ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
__ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
__ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
__ölöe
 
uöt32_t
 
	$ªad_e•
(Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
__ölöe
 
	`˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
);

36 
__ölöe
 
uöt64_t
 
	$ªad_tsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
__ölöe
 

39 
	$bªakpoöt
()

41 
__asm
 
	`__vﬁ©ûe
("int3");

42 
	}
}

44 
__ölöe
 
uöt8_t


45 
	$öb
(
p‹t
)

47 
uöt8_t
 
d©a
;

48 
__asm
 
	`__vﬁ©ûe
("öb %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

49  
d©a
;

50 
	}
}

52 
__ölöe
 

53 
	$ösb
(
p‹t
, *
addr
, 
˙t
)

55 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsb" :

56 "=D" (
addr
), "=c" (
˙t
) :

57 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

59 
	}
}

61 
__ölöe
 
uöt16_t


62 
	$öw
(
p‹t
)

64 
uöt16_t
 
d©a
;

65 
__asm
 
	`__vﬁ©ûe
("öw %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

66  
d©a
;

67 
	}
}

69 
__ölöe
 

70 
	$ösw
(
p‹t
, *
addr
, 
˙t
)

72 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsw" :

73 "=D" (
addr
), "=c" (
˙t
) :

74 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

76 
	}
}

78 
__ölöe
 
uöt32_t


79 
	$öl
(
p‹t
)

81 
uöt32_t
 
d©a
;

82 
__asm
 
	`__vﬁ©ûe
("ö»%w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

83  
d©a
;

84 
	}
}

86 
__ölöe
 

87 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

89 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsl" :

90 "=D" (
addr
), "=c" (
˙t
) :

91 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

93 
	}
}

95 
__ölöe
 

96 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
)

98 
__asm
 
	`__vﬁ©ûe
("outb %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

99 
	}
}

101 
__ölöe
 

102 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
)

104 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsb" :

105 "=S" (
addr
), "=c" (
˙t
) :

106 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

108 
	}
}

110 
__ölöe
 

111 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
)

113 
__asm
 
	`__vﬁ©ûe
("outw %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

114 
	}
}

116 
__ölöe
 

117 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
)

119 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsw" :

120 "=S" (
addr
), "=c" (
˙t
) :

121 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

123 
	}
}

125 
__ölöe
 

126 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

128 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsl" :

129 "=S" (
addr
), "=c" (
˙t
) :

130 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

132 
	}
}

134 
__ölöe
 

135 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
)

137 
__asm
 
	`__vﬁ©ûe
("oué %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

138 
	}
}

140 
__ölöe
 

141 
	$övÕg
(*
addr
)

143 
__asm
 
	`__vﬁ©ûe
("övÕg (%0)" : : "r" (
addr
) : "memory");

144 
	}
}

146 
__ölöe
 

147 
	$lidt
(*
p
)

149 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
p
));

150 
	}
}

152 
__ölöe
 

153 
	$Œdt
(
uöt16_t
 
£l
)

155 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

156 
	}
}

158 
__ölöe
 

159 
	$…r
(
uöt16_t
 
£l
)

161 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

162 
	}
}

164 
__ölöe
 

165 
	$l¸0
(
uöt32_t
 
vÆ
)

167 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸0" : : "r" (
vÆ
));

168 
	}
}

170 
__ölöe
 
uöt32_t


171 
	$r¸0
()

173 
uöt32_t
 
vÆ
;

174 
__asm
 
	`__vﬁ©ûe
("mov»%%¸0,%0" : "Ù" (
vÆ
));

175  
vÆ
;

176 
	}
}

178 
__ölöe
 
uöt32_t


179 
	$r¸2
()

181 
uöt32_t
 
vÆ
;

182 
__asm
 
	`__vﬁ©ûe
("mov»%%¸2,%0" : "Ù" (
vÆ
));

183  
vÆ
;

184 
	}
}

186 
__ölöe
 

187 
	$l¸3
(
uöt32_t
 
vÆ
)

189 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
vÆ
));

190 
	}
}

192 
__ölöe
 
uöt32_t


193 
	$r¸3
()

195 
uöt32_t
 
vÆ
;

196 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
vÆ
));

197  
vÆ
;

198 
	}
}

200 
__ölöe
 

201 
	$l¸4
(
uöt32_t
 
vÆ
)

203 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸4" : : "r" (
vÆ
));

204 
	}
}

206 
__ölöe
 
uöt32_t


207 
	$r¸4
()

209 
uöt32_t
 
¸4
;

210 
__asm
 
	`__vﬁ©ûe
("mov»%%¸4,%0" : "Ù" (
¸4
));

211  
¸4
;

212 
	}
}

214 
__ölöe
 

215 
	$ébÊush
()

217 
uöt32_t
 
¸3
;

218 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
¸3
));

219 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
¸3
));

220 
	}
}

222 
__ölöe
 
uöt32_t


223 
	$ªad_eÊags
()

225 
uöt32_t
 
eÊags
;

226 
__asm
 
	`__vﬁ©ûe
("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

227  
eÊags
;

228 
	}
}

230 
__ölöe
 

231 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
)

233 
__asm
 
	`__vﬁ©ûe
("push»%0;Ö›Ê" : : "r" (
eÊags
));

234 
	}
}

236 
__ölöe
 
uöt32_t


237 
	$ªad_ebp
()

239 
uöt32_t
 
ebp
;

240 
__asm
 
	`__vﬁ©ûe
("mov»%%ebp,%0" : "Ù" (
ebp
));

241  
ebp
;

242 
	}
}

244 
__ölöe
 
uöt32_t


245 
	$ªad_e•
()

247 
uöt32_t
 
e•
;

248 
__asm
 
	`__vﬁ©ûe
("mov»%%e•,%0" : "Ù" (
e•
));

249  
e•
;

250 
	}
}

252 
__ölöe
 

253 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

255 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

256 
asm
 volatile("cpuid"

257 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

258 : "a" (
öfo
));

259 i‡(
óxp
)

260 *
óxp
 = 
óx
;

261 i‡(
ebxp
)

262 *
ebxp
 = 
ebx
;

263 i‡(
ecxp
)

264 *
ecxp
 = 
ecx
;

265 i‡(
edxp
)

266 *
edxp
 = 
edx
;

267 
	}
}

269 
__ölöe
 
uöt64_t


270 
	$ªad_tsc
()

272 
uöt64_t
 
tsc
;

273 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "=A" (
tsc
));

274  
tsc
;

275 
	}
}

	@kern/console.c

3 
	~<öc/x86.h
>

4 
	~<öc/memœyout.h
>

5 
	~<öc/kbdªg.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kîn/c⁄sﬁe.h
>

11 
c⁄s_öå
((*
¥oc
)());

12 
	`c⁄s_putc
(
c
);

16 
	$dñay
()

18 
	`öb
(0x84);

19 
	`öb
(0x84);

20 
	`öb
(0x84);

21 
	`öb
(0x84);

22 
	}
}

26 
	#COM1
 0x3F8

	)

28 
	#COM_RX
 0

29 
	#COM_TX
 0

30 
	#COM_DLL
 0

31 
	#COM_DLM
 1

32 
	#COM_IER
 1

33 
	#COM_IER_RDI
 0x01

34 
	#COM_IIR
 2

35 
	#COM_FCR
 2

36 
	#COM_LCR
 3

37 
	#COM_LCR_DLAB
 0x80

38 
	#COM_LCR_WLEN8
 0x03

39 
	#COM_MCR
 4

40 
	#COM_MCR_RTS
 0x02

41 
	#COM_MCR_DTR
 0x01

42 
	#COM_MCR_OUT2
 0x08

43 
	#COM_LSR
 5

44 
	#COM_LSR_DATA
 0x01

45 
	#COM_LSR_TXRDY
 0x20

46 
	#COM_LSR_TSRE
 0x40

47 

	)

48 
boﬁ
 
	g£rül_exi°s
;

51 
	$£rül_¥oc_d©a
()

53 i‡(!(
	`öb
(
COM1
+
COM_LSR
Ë& 
COM_LSR_DATA
))

55  
	`öb
(
COM1
+
COM_RX
);

56 
	}
}

59 
	$£rül_öå
()

61 i‡(
£rül_exi°s
)

62 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

63 
	}
}

66 
	$£rül_putc
(
c
)

68 
i
;

70 
i
 = 0;

71 !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
Ë&& 
i
 < 12800;

72 
i
++)

73 
	`dñay
();

75 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

76 
	}
}

79 
	$£rül_öô
()

82 
	`outb
(
COM1
+
COM_FCR
, 0);

85 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_DLAB
);

86 
	`outb
(
COM1
+
COM_DLL
, (
uöt8_t
) (115200 / 9600));

87 
	`outb
(
COM1
+
COM_DLM
, 0);

90 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_WLEN8
 & ~
COM_LCR_DLAB
);

93 
	`outb
(
COM1
+
COM_MCR
, 0);

95 
	`outb
(
COM1
+
COM_IER
, 
COM_IER_RDI
);

99 
£rül_exi°s
 = (
	`öb
(
COM1
+
COM_LSR
) != 0xFF);

100 (Ë
	`öb
(
COM1
+
COM_IIR
);

101 (Ë
	`öb
(
COM1
+
COM_RX
);

103 
	}
}

112 
	$Õt_putc
(
c
)

114 
i
;

116 
i
 = 0; !(
	`öb
(0x378+1) & 0x80) && i < 12800; i++)

117 
	`dñay
();

118 
	`outb
(0x378+0, 
c
);

119 
	`outb
(0x378+2, 0x08|0x04|0x01);

120 
	`outb
(0x378+2, 0x08);

121 
	}
}

128 
	gaddr_6845
;

129 
uöt16_t
 *
	g¸t_buf
;

130 
uöt16_t
 
	g¸t_pos
;

133 
	$cga_öô
()

135 vﬁ©ûê
uöt16_t
 *
˝
;

136 
uöt16_t
 
was
;

137 
pos
;

139 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
CGA_BUF
);

140 
was
 = *
˝
;

141 *
˝
 = (
uöt16_t
) 0xA55A;

142 i‡(*
˝
 != 0xA55A) {

143 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
MONO_BUF
);

144 
addr_6845
 = 
MONO_BASE
;

146 *
˝
 = 
was
;

147 
addr_6845
 = 
CGA_BASE
;

151 
	`outb
(
addr_6845
, 14);

152 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

153 
	`outb
(
addr_6845
, 15);

154 
pos
 |
	`öb
(
addr_6845
 + 1);

156 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

157 
¸t_pos
 = 
pos
;

158 
	}
}

163 
	$cga_putc
(
c
)

166 i‡(!(
c
 & ~0xFF))

167 
c
 |= 0x0700;

169 
c
 & 0xff) {

171 i‡(
¸t_pos
 > 0) {

172 
¸t_pos
--;

173 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

177 
¸t_pos
 +
CRT_COLS
;

180 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

183 
	`c⁄s_putc
(' ');

184 
	`c⁄s_putc
(' ');

185 
	`c⁄s_putc
(' ');

186 
	`c⁄s_putc
(' ');

187 
	`c⁄s_putc
(' ');

190 
¸t_buf
[
¸t_pos
++] = 
c
;

195 i‡(
¸t_pos
 >
CRT_SIZE
) {

196 
i
;

198 
	`memmove
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

199 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i++)

200 
¸t_buf
[
i
] = 0x0700 | ' ';

201 
¸t_pos
 -
CRT_COLS
;

205 
	`outb
(
addr_6845
, 14);

206 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

207 
	`outb
(
addr_6845
, 15);

208 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

209 
	}
}

214 
	#NO
 0

	)

216 
	#SHIFT
 (1<<0)

	)

217 
	#CTL
 (1<<1)

	)

218 
	#ALT
 (1<<2)

	)

220 
	#CAPSLOCK
 (1<<3)

	)

221 
	#NUMLOCK
 (1<<4)

	)

222 
	#SCROLLLOCK
 (1<<5)

	)

224 
	#E0ESC
 (1<<6)

	)

226 
uöt8_t
 
	gshi·code
[256] =

228 [0x1D] = 
CTL
,

229 [0x2A] = 
SHIFT
,

230 [0x36] = 
SHIFT
,

231 [0x38] = 
ALT
,

232 [0x9D] = 
CTL
,

233 [0xB8] = 
ALT


236 
uöt8_t
 
	gtoggÀcode
[256] =

238 [0x3A] = 
CAPSLOCK
,

239 [0x45] = 
NUMLOCK
,

240 [0x46] = 
SCROLLLOCK


243 
uöt8_t
 
	gn‹mÆm≠
[256] =

245 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

248 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

250 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

251 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

252 
NO
, ' ', NO, NO, NO, NO, NO, NO,

253 
NO
, NO, NO, NO, NO, NO, NO, '7',

255 '2', '3', '0', '.', 
NO
, NO, NO, NO,

256 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

257 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

258 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

259 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

260 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

261 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


264 
uöt8_t
 
	gshi·m≠
[256] =

266 
NO
, 033, '!', '@', '#', '$', '%', '^',

269 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

271 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

272 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

273 
NO
, ' ', NO, NO, NO, NO, NO, NO,

274 
NO
, NO, NO, NO, NO, NO, NO, '7',

276 '2', '3', '0', '.', 
NO
, NO, NO, NO,

277 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

278 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

279 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

280 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

281 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

282 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


285 
	#C
(
x
Ë(x - '@')

	)

287 
uöt8_t
 
	g˘lm≠
[256] =

289 
NO
, NO, NO, NO, NO, NO, NO, NO,

290 
NO
, NO, NO, NO, NO, NO, NO, NO,

291 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

292 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

293 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

294 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

295 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

296 [0x97] = 
KEY_HOME
,

297 [0xB5] = 
C
('/'), [0xC8] = 
KEY_UP
,

298 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

299 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

300 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

301 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


304 
uöt8_t
 *
	gch¨code
[4] = {

305 
n‹mÆm≠
,

306 
shi·m≠
,

307 
˘lm≠
,

308 
˘lm≠


316 
	$kbd_¥oc_d©a
()

318 
c
;

319 
uöt8_t
 
d©a
;

320 
uöt32_t
 
shi·
;

322 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0)

325 
d©a
 = 
	`öb
(
KBDATAP
);

327 i‡(
d©a
 == 0xE0) {

329 
shi·
 |
E0ESC
;

331 } i‡(
d©a
 & 0x80) {

333 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

334 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

336 } i‡(
shi·
 & 
E0ESC
) {

338 
d©a
 |= 0x80;

339 
shi·
 &~
E0ESC
;

342 
shi·
 |
shi·code
[
d©a
];

343 
shi·
 ^
toggÀcode
[
d©a
];

345 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

346 i‡(
shi·
 & 
CAPSLOCK
) {

347 i‡('a' <
c
 && c <= 'z')

348 
c
 += 'A' - 'a';

349 i‡('A' <
c
 && c <= 'Z')

350 
c
 += 'a' - 'A';

355 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

356 
	`˝rötf
("Rebooting!\n");

357 
	`outb
(0x92, 0x3);

360  
c
;

361 
	}
}

364 
	$kbd_öå
()

366 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

367 
	}
}

370 
	$kbd_öô
()

372 
	}
}

381 
	#CONSBUFSIZE
 512

	)

384 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

385 
uöt32_t
 
	mΩos
;

386 
uöt32_t
 
	mwpos
;

387 } 
	gc⁄s
;

392 
c⁄s_öå
((*
¥oc
)())

394 
c
;

396 (
c
 = (*
¥oc
)()) != -1) {

397 i‡(
c
 == 0)

399 
c⁄s
.
buf
[c⁄s.
wpos
++] = 
c
;

400 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
)

401 
c⁄s
.
wpos
 = 0;

403 
	}
}

407 
	$c⁄s_gëc
()

409 
c
;

414 
	`£rül_öå
();

415 
	`kbd_öå
();

418 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

419 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
++];

420 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
)

421 
c⁄s
.
Ωos
 = 0;

422  
c
;

425 
	}
}

429 
	$c⁄s_putc
(
c
)

431 
	`£rül_putc
(
c
);

432 
	`Õt_putc
(
c
);

433 
	`cga_putc
(
c
);

434 
	}
}

438 
	$c⁄s_öô
()

440 
	`cga_öô
();

441 
	`kbd_öô
();

442 
	`£rül_öô
();

444 i‡(!
£rül_exi°s
)

445 
	`˝rötf
("SerialÖort doesÇotÉxist!\n");

446 
	}
}

452 
	$˝utch¨
(
c
)

454 
	`c⁄s_putc
(
c
);

455 
	}
}

458 
	$gëch¨
()

460 
c
;

462 (
c
 = 
	`c⁄s_gëc
()) == 0)

464  
c
;

465 
	}
}

468 
	$isc⁄s
(
fdnum
)

472 
	}
}

	@kern/console.h

3 #i‚de‡
_CONSOLE_H_


4 
	#_CONSOLE_H_


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/ty≥s.h
>

11 
	#MONO_BASE
 0x3B4

	)

12 
	#MONO_BUF
 0xB0000

	)

13 
	#CGA_BASE
 0x3D4

	)

14 
	#CGA_BUF
 0xB8000

	)

16 
	#CRT_ROWS
 25

	)

17 
	#CRT_COLS
 80

	)

18 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

20 
c⁄s_öô
();

21 
c⁄s_gëc
();

23 
kbd_öå
();

24 
£rül_öå
();

	@kern/init.c

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/as£π.h
>

7 
	~<kîn/m⁄ô‹.h
>

8 
	~<kîn/c⁄sﬁe.h
>

12 
	$ã°_backåa˚
(
x
)

14 
	`˝rötf
("íãrögÅe°_backåa˚ %d\n", 
x
);

15 i‡(
x
 > 0)

16 
	`ã°_backåa˚
(
x
-1);

18 
	`m⁄_backåa˚
(0, 0, 0);

19 
	`˝rötf
("ÀavögÅe°_backåa˚ %d\n", 
x
);

20 
	}
}

23 
	$i386_öô
()

25 
ed©a
[], 
íd
[];

30 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

34 
	`c⁄s_öô
();

36 
	`˝rötf
("6828 decimal is %o octal!\n", 6828);

45 
	`ã°_backåa˚
(5);

49 
	`m⁄ô‹
(
NULL
);

50 
	}
}

57 c⁄° *
	g∑nic°r
;

64 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

66 
va_li°
 
≠
;

68 i‡(
∑nic°r
)

69 
dód
;

70 
∑nic°r
 = 
fmt
;

72 
	`va_°¨t
(
≠
, 
fmt
);

73 
	`˝rötf
("kî√»∑ni¯© %s:%d: ", 
fûe
, 
löe
);

74 
	`v˝rötf
(
fmt
, 
≠
);

75 
	`˝rötf
("\n");

76 
	`va_íd
(
≠
);

78 
dód
:

81 
	`m⁄ô‹
(
NULL
);

82 
	}
}

86 
	$_w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

88 
va_li°
 
≠
;

90 
	`va_°¨t
(
≠
, 
fmt
);

91 
	`˝rötf
("kî√»w¨nögáà%s:%d: ", 
fûe
, 
löe
);

92 
	`v˝rötf
(
fmt
, 
≠
);

93 
	`˝rötf
("\n");

94 
	`va_íd
(
≠
);

95 
	}
}

	@kern/kdebug.c

1 
	~<öc/°ab.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/memœyout.h
>

4 
	~<öc/as£π.h
>

6 
	~<kîn/kdebug.h
>

8 c⁄° 
Sèb
 
__STAB_BEGIN__
[];

9 c⁄° 
Sèb
 
__STAB_END__
[];

10 c⁄° 
__STABSTR_BEGIN__
[];

11 c⁄° 
__STABSTR_END__
[];

51 
	$°ab_bö£¨ch
(c⁄° 
Sèb
 *
°abs
, *
ªgi⁄_À·
, *
ªgi⁄_right
,

52 
ty≥
, 
uöçå_t
 
addr
)

54 
l
 = *
ªgi⁄_À·
, 
r
 = *
ªgi⁄_right
, 
™y_m©ches
 = 0;

56 
l
 <
r
) {

57 
åue_m
 = (
l
 + 
r
Ë/ 2, 
m
 =Årue_m;

60 
m
 >
l
 && 
°abs
[m].
n_ty≥
 !
ty≥
)

61 
m
--;

62 i‡(
m
 < 
l
) {

63 
l
 = 
åue_m
 + 1;

68 
™y_m©ches
 = 1;

69 i‡(
°abs
[
m
].
n_vÆue
 < 
addr
) {

70 *
ªgi⁄_À·
 = 
m
;

71 
l
 = 
åue_m
 + 1;

72 } i‡(
°abs
[
m
].
n_vÆue
 > 
addr
) {

73 *
ªgi⁄_right
 = 
m
 - 1;

74 
r
 = 
m
 - 1;

78 *
ªgi⁄_À·
 = 
m
;

79 
l
 = 
m
;

80 
addr
++;

84 i‡(!
™y_m©ches
)

85 *
ªgi⁄_right
 = *
ªgi⁄_À·
 - 1;

88 
l
 = *
ªgi⁄_right
;

89 
l
 > *
ªgi⁄_À·
 && 
°abs
[l].
n_ty≥
 !
ty≥
;

90 
l
--)

92 *
ªgi⁄_À·
 = 
l
;

94 
	}
}

105 
	$debugöfo_eù
(
uöçå_t
 
addr
, 
Eùdebugöfo
 *
öfo
)

107 c⁄° 
Sèb
 *
°abs
, *
°ab_íd
;

108 c⁄° *
°ab°r
, *
°ab°r_íd
;

109 
lfûe
, 
rfûe
, 
lfun
, 
rfun
, 
Œöe
, 
æöe
;

112 
öfo
->
eù_fûe
 = "<unknown>";

113 
öfo
->
eù_löe
 = 0;

114 
öfo
->
eù_‚_«me
 = "<unknown>";

115 
öfo
->
eù_‚_«mñí
 = 9;

116 
öfo
->
eù_‚_addr
 = 
addr
;

117 
öfo
->
eù_‚_«rg
 = 0;

120 i‡(
addr
 >
ULIM
) {

121 
°abs
 = 
__STAB_BEGIN__
;

122 
°ab_íd
 = 
__STAB_END__
;

123 
°ab°r
 = 
__STABSTR_BEGIN__
;

124 
°ab°r_íd
 = 
__STABSTR_END__
;

127 
	`∑nic
("Useráddress");

131 i‡(
°ab°r_íd
 <
°ab°r
 || stabstr_end[-1] != 0)

140 
lfûe
 = 0;

141 
rfûe
 = (
°ab_íd
 - 
°abs
) - 1;

142 
	`°ab_bö£¨ch
(
°abs
, &
lfûe
, &
rfûe
, 
N_SO
, 
addr
);

143 i‡(
lfûe
 == 0)

148 
lfun
 = 
lfûe
;

149 
rfun
 = 
rfûe
;

150 
	`°ab_bö£¨ch
(
°abs
, &
lfun
, &
rfun
, 
N_FUN
, 
addr
);

152 i‡(
lfun
 <
rfun
) {

155 i‡(
°abs
[
lfun
].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

156 
öfo
->
eù_‚_«me
 = 
°ab°r
 + 
°abs
[
lfun
].
n_°rx
;

157 
öfo
->
eù_‚_addr
 = 
°abs
[
lfun
].
n_vÆue
;

158 
addr
 -
öfo
->
eù_‚_addr
;

160 
Œöe
 = 
lfun
;

161 
æöe
 = 
rfun
;

165 
öfo
->
eù_‚_addr
 = 
addr
;

166 
Œöe
 = 
lfûe
;

167 
æöe
 = 
rfûe
;

170 
öfo
->
eù_‚_«mñí
 = 
	`°rföd
(öfo->
eù_‚_«me
, ':') - info->eip_fn_name;

189 
Œöe
 >
lfûe


190 && 
°abs
[
Œöe
].
n_ty≥
 !
N_SOL


191 && (
°abs
[
Œöe
].
n_ty≥
 !
N_SO
 || !°abs[Œöe].
n_vÆue
))

192 
Œöe
--;

193 i‡(
Œöe
 >
lfûe
 && 
°abs
[Œöe].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

194 
öfo
->
eù_fûe
 = 
°ab°r
 + 
°abs
[
Œöe
].
n_°rx
;

199 i‡(
lfun
 < 
rfun
)

200 
Œöe
 = 
lfun
 + 1;

201 
Œöe
 < 
rfun
 && 
°abs
[Œöe].
n_ty≥
 =
N_PSYM
;

202 
Œöe
++)

203 
öfo
->
eù_‚_«rg
++;

206 
	}
}

	@kern/kdebug.h

1 #i‚de‡
JOS_KERN_KDEBUG_H


2 
	#JOS_KERN_KDEBUG_H


	)

4 
	~<öc/ty≥s.h
>

7 
	sEùdebugöfo
 {

8 c⁄° *
	meù_fûe
;

9 
	meù_löe
;

11 c⁄° *
	meù_‚_«me
;

13 
	meù_‚_«mñí
;

14 
uöçå_t
 
	meù_‚_addr
;

15 
	meù_‚_«rg
;

18 
debugöfo_eù
(
uöçå_t
 
eù
, 
Eùdebugöfo
 *
öfo
);

	@kern/monitor.c

4 
	~<öc/°dio.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/memœyout.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/x86.h
>

10 
	~<kîn/c⁄sﬁe.h
>

11 
	~<kîn/m⁄ô‹.h
>

12 
	~<kîn/kdebug.h
>

14 
	#CMDBUF_SIZE
 80

15 

	)

17 
	sComm™d
 {

18 c⁄° *
	m«me
;

19 c⁄° *
	mdesc
;

21 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
, 
Tøp‰ame
* 
	mtf
);

24 
Comm™d
 
	gcomm™ds
[] = {

25 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

26 { "kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l", 
m⁄_kînöfo
 },

28 
	#NCOMMANDS
 ((
comm™ds
)/(comm™ds[0]))

	)

30 
ªad_eù
();

35 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

37 
i
;

39 
i
 = 0; i < 
NCOMMANDS
; i++)

40 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

42 
	}
}

45 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

47 
_°¨t
[], 
ëext
[], 
ed©a
[], 
íd
[];

49 
	`˝rötf
("Special kernel symbols:\n");

50 
	`˝rötf
(" _°¨à%08x (vútË %08x (phys)\n", 
_°¨t
, _°¨à- 
KERNBASE
);

51 
	`˝rötf
("Éãxà %08x (vútË %08x (phys)\n", 
ëext
,Éãxà- 
KERNBASE
);

52 
	`˝rötf
("Éd©® %08x (vútË %08x (phys)\n", 
ed©a
,Éd©®- 
KERNBASE
);

53 
	`˝rötf
("Énd %08x (vútË %08x (phys)\n", 
íd
,Énd - 
KERNBASE
);

54 
	`˝rötf
("KernelÉxecutable memory footprint: %dKB\n",

55 (
íd
-
_°¨t
+1023)/1024);

57 
	}
}

60 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

64 
	}
}

70 
	#WHITESPACE
 "\t\r\¿"

	)

71 
	#MAXARGS
 16

	)

74 
	$runcmd
(*
buf
, 
Tøp‰ame
 *
tf
)

76 
¨gc
;

77 *
¨gv
[
MAXARGS
];

78 
i
;

81 
¨gc
 = 0;

82 
¨gv
[
¨gc
] = 0;

85 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

86 *
buf
++ = 0;

87 i‡(*
buf
 == 0)

91 i‡(
¨gc
 =
MAXARGS
-1) {

92 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

95 
¨gv
[
¨gc
++] = 
buf
;

96 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

97 
buf
++;

99 
¨gv
[
¨gc
] = 0;

102 i‡(
¨gc
 == 0)

104 
i
 = 0; i < 
NCOMMANDS
; i++) {

105 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

106  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
, 
tf
);

108 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

110 
	}
}

113 
	$m⁄ô‹
(
Tøp‰ame
 *
tf
)

115 *
buf
;

117 
	`˝rötf
("WelcomeÅoÅhe JOS kernel monitor!\n");

118 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

122 
buf
 = 
	`ªadlöe
("K> ");

123 i‡(
buf
 !
NULL
)

124 i‡(
	`runcmd
(
buf
, 
tf
) < 0)

127 
	}
}

133 
	$ªad_eù
()

135 
uöt32_t
 
ˇŒîpc
;

136 
__asm
 
	`__vﬁ©ûe
("mov»4(%%ebp), %0" : "Ù" (
ˇŒîpc
));

137  
ˇŒîpc
;

138 
	}
}

	@kern/monitor.h

1 #i‚de‡
JOS_KERN_MONITOR_H


2 
	#JOS_KERN_MONITOR_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	gTøp‰ame
;

12 
m⁄ô‹
(
Tøp‰ame
 *
tf
);

15 
m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

16 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

17 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

	@kern/printf.c

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°d¨g.h
>

10 
	$putch
(
ch
, *
˙t
)

12 
	`˝utch¨
(
ch
);

13 *
˙t
++;

14 
	}
}

17 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

19 
˙t
 = 0;

21 
	`v¥ötfmt
((*)
putch
, &
˙t
, 
fmt
, 
≠
);

22  
˙t
;

23 
	}
}

26 
	$˝rötf
(c⁄° *
fmt
, ...)

28 
va_li°
 
≠
;

29 
˙t
;

31 
	`va_°¨t
(
≠
, 
fmt
);

32 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

33 
	`va_íd
(
≠
);

35  
˙t
;

36 
	}
}

	@lib/nsipc.c

1 
	~<öc/ns.h
>

2 
	~<öc/lib.h
>

3 
	~<lwù/sockës.h
>

5 
	#debug
 0

	)

8 
	#REQVA
 0x0ffff000

	)

9 
uöt8_t
 
nsùcbuf
[
PGSIZE
];

19 
	$nsùc
(
ty≥
, *
f§eq
, *
d°va
, *
≥rm
)

21 
ívid_t
 
whom
;

23 i‡(
debug
)

24 
	`˝rötf
("[%08x]Çsù¯%d %08x\n", 
ív
->
ív_id
, 
ty≥
, 
nsùcbuf
);

26 
	`ùc_£nd
(
ívs
[2].
ív_id
, 
ty≥
, 
f§eq
, 
PTE_P
|
PTE_W
|
PTE_U
);

27  
	`ùc_ªcv
(&
whom
, 
d°va
, 
≥rm
);

28 
	}
}

31 
	$nsùc_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

33 
≥rm
, 
r
;

34 
N§eq_ac˚±
 *
ªq
;

35 
N§ë_ac˚±
 *
ªt
;

37 
ªq
 = (
N§eq_ac˚±
*)
nsùcbuf
;

38 
ªq
->
ªq_s
 = 
s
;

40 
r
 = 
	`nsùc
(
NSREQ_ACCEPT
, 
ªq
, (*)
REQVA
, &
≥rm
);

42 
ªt
 = (
N§ë_ac˚±
*Ë
REQVA
;

43 
	`memmove
(
addr
, &
ªt
->
ªt_addr
,Ñë->
ªt_addæí
);

44 *
addæí
 = 
ªt
->
ªt_addæí
;

46  
r
;

47 
	}
}

50 
	$nsùc_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

52 
≥rm
;

53 
N§eq_böd
 *
ªq
;

55 
ªq
 = (
N§eq_böd
*)
nsùcbuf
;

56 
ªq
->
ªq_s
 = 
s
;

57 
	`memmove
(&
ªq
->
ªq_«me
, 
«me
, 
«mñí
);

58 
ªq
->
ªq_«mñí
 = 
«mñí
;

59  
	`nsùc
(
NSREQ_BIND
, 
ªq
, 0, &
≥rm
);

60 
	}
}

63 
	$nsùc_shutdown
(
s
, 
how
)

65 
≥rm
;

66 
N§eq_shutdown
 *
ªq
;

68 
ªq
 = (
N§eq_shutdown
*)
nsùcbuf
;

69 
ªq
->
ªq_s
 = 
s
;

70 
ªq
->
ªq_how
 = 
how
;

71  
	`nsùc
(
NSREQ_SHUTDOWN
, 
ªq
, 0, &
≥rm
);

72 
	}
}

75 
	$nsùc_˛o£
(
s
)

77 
≥rm
;

78 
N§eq_˛o£
 *
ªq
;

80 
ªq
 = (
N§eq_˛o£
*)
nsùcbuf
;

81 
ªq
->
ªq_s
 = 
s
;

82  
	`nsùc
(
NSREQ_CLOSE
, 
ªq
, 0, &
≥rm
);

83 
	}
}

86 
	$nsùc_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

88 
≥rm
;

89 
N§eq_c⁄√˘
 *
ªq
;

91 
ªq
 = (
N§eq_c⁄√˘
*)
nsùcbuf
;

92 
ªq
->
ªq_s
 = 
s
;

93 
	`memmove
(&
ªq
->
ªq_«me
, 
«me
, 
«mñí
);

94 
ªq
->
ªq_«mñí
 = 
«mñí
;

95  
	`nsùc
(
NSREQ_CONNECT
, 
ªq
, 0, &
≥rm
);

96 
	}
}

99 
	$nsùc_li°í
(
s
, 
backlog
)

101 
≥rm
;

102 
N§eq_li°í
 *
ªq
;

104 
ªq
 = (
N§eq_li°í
*)
nsùcbuf
;

105 
ªq
->
ªq_s
 = 
s
;

106 
ªq
->
ªq_backlog
 = 
backlog
;

107  
	`nsùc
(
NSREQ_LISTEN
, 
ªq
, 0, &
≥rm
);

108 
	}
}

111 
	$nsùc_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
)

113 
≥rm
, 
r
;

114 
N§eq_ªcv
 *
ªq
;

115 *
ªt
;

117 
ªq
 = (
N§eq_ªcv
*)
nsùcbuf
;

118 
ªq
->
ªq_s
 = 
s
;

119 
ªq
->
ªq_Àn
 = 
Àn
;

120 
ªq
->
ªq_Êags
 = 
Êags
;

122 
r
 = 
	`nsùc
(
NSREQ_RECV
, 
ªq
, (*)
REQVA
, &
≥rm
);

124 
	`as£π
(
r
 < 1600 &&Ñ <
Àn
);

125 
ªt
 = (*Ë
REQVA
;

126 
	`memmove
(
mem
, 
ªt
, 
r
);

128  
r
;

129 
	}
}

132 
	$nsùc_£nd
(
s
, c⁄° *
d©≠å
, 
size
, 
Êags
)

134 
≥rm
;

135 
N§eq_£nd
 *
ªq
;

137 
ªq
 = (
N§eq_£nd
*)
nsùcbuf
;

138 
ªq
->
ªq_s
 = 
s
;

139 
	`as£π
(
size
 < 1600);

140 
	`memmove
(&
ªq
->
ªq_d©≠å
, 
d©≠å
, 
size
);

141 
ªq
->
ªq_size
 = 
size
;

142 
ªq
->
ªq_Êags
 = 
Êags
;

143  
	`nsùc
(
NSREQ_SEND
, 
ªq
, 0, &
≥rm
);

144 
	}
}

147 
	$nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

149 
≥rm
;

150 
N§eq_sockë
 *
ªq
;

152 
ªq
 = (
N§eq_sockë
*)
nsùcbuf
;

153 
ªq
->
ªq_domaö
 = 
domaö
;

154 
ªq
->
ªq_ty≥
 = 
ty≥
;

155 
ªq
->
ªq_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

156  
	`nsùc
(
NSREQ_SOCKET
, 
ªq
, 0, &
≥rm
);

157 
	}
}

	@lib/printfmt.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°dio.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/°d¨g.h
>

9 
	~<öc/îr‹.h
>

21 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
 + 1] =

23 
NULL
,

37 
¥öäum
((*
putch
)(, *), *
putd©
,

38 
num
, 
ba£
, 
width
, 
∑dc
)

41 i‡(
num
 >
ba£
) {

42 
	`¥öäum
(
putch
, 
putd©
, 
num
 / 
ba£
, ba£, 
width
 - 1, 
∑dc
);

45 --
width
 > 0)

46 
	`putch
(
∑dc
, 
putd©
);

50 
	`putch
("0123456789abcdef"[
num
 % 
ba£
], 
putd©
);

51 
	}
}

56 
	$gëuöt
(
va_li°
 *
≠
, 
lÊag
)

58 i‡(
lÊag
 >= 2)

59  
	`va_¨g
(*
≠
, );

60 i‡(
lÊag
)

61  
	`va_¨g
(*
≠
, );

63  
	`va_¨g
(*
≠
, );

64 
	}
}

69 
	$gëöt
(
va_li°
 *
≠
, 
lÊag
)

71 i‡(
lÊag
 >= 2)

72  
	`va_¨g
(*
≠
, );

73 i‡(
lÊag
)

74  
	`va_¨g
(*
≠
, );

76  
	`va_¨g
(*
≠
, );

77 
	}
}

81 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

84 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
)

86 c⁄° *
p
;

87 
ch
, 
îr
;

88 
num
;

89 
ba£
, 
lÊag
, 
width
, 
¥ecisi⁄
, 
ÆtÊag
;

90 
∑dc
;

93 (
ch
 = *(*Ë
fmt
++) != '%') {

94 i‡(
ch
 == '\0')

96 
	`putch
(
ch
, 
putd©
);

100 
∑dc
 = ' ';

101 
width
 = -1;

102 
¥ecisi⁄
 = -1;

103 
lÊag
 = 0;

104 
ÆtÊag
 = 0;

105 
ªswôch
:

106 
ch
 = *(*Ë
fmt
++) {

110 
∑dc
 = '-';

111 
ªswôch
;

115 
∑dc
 = '0';

116 
ªswôch
;

128 
¥ecisi⁄
 = 0; ; ++
fmt
) {

129 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

130 
ch
 = *
fmt
;

131 i‡(
ch
 < '0' || ch > '9')

134 
¥o˚ss_¥ecisi⁄
;

137 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

138 
¥o˚ss_¥ecisi⁄
;

141 i‡(
width
 < 0)

142 
width
 = 0;

143 
ªswôch
;

146 
ÆtÊag
 = 1;

147 
ªswôch
;

149 
¥o˚ss_¥ecisi⁄
:

150 i‡(
width
 < 0)

151 
width
 = 
¥ecisi⁄
,Örecision = -1;

152 
ªswôch
;

156 
lÊag
++;

157 
ªswôch
;

161 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
);

166 
îr
 = 
	`va_¨g
(
≠
, );

167 i‡(
îr
 < 0)

168 
îr
 = -err;

169 i‡(
îr
 > 
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
)

170 
	`¥ötfmt
(
putch
, 
putd©
, "îr‹ %d", 
îr
);

172 
	`¥ötfmt
(
putch
, 
putd©
, "%s", 
p
);

177 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
)

178 
p
 = "(null)";

179 i‡(
width
 > 0 && 
∑dc
 != '-')

180 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width--)

181 
	`putch
(
∑dc
, 
putd©
);

182 ; (
ch
 = *
p
++Ë!'\0' && (
¥ecisi⁄
 < 0 || --¥ecisi⁄ >0); 
width
--)

183 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~'))

184 
	`putch
('?', 
putd©
);

186 
	`putch
(
ch
, 
putd©
);

187 ; 
width
 > 0; width--)

188 
	`putch
(' ', 
putd©
);

193 
num
 = 
	`gëöt
(&
≠
, 
lÊag
);

194 i‡((Ë
num
 < 0) {

195 
	`putch
('-', 
putd©
);

196 
num
 = -()Çum;

198 
ba£
 = 10;

199 
numbî
;

203 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

204 
ba£
 = 10;

205 
numbî
;

210 
	`putch
('X', 
putd©
);

211 
	`putch
('X', 
putd©
);

212 
	`putch
('X', 
putd©
);

217 
	`putch
('0', 
putd©
);

218 
	`putch
('x', 
putd©
);

219 
num
 = ()

220 (
uöçå_t
Ë
	`va_¨g
(
≠
, *);

221 
ba£
 = 16;

222 
numbî
;

226 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

227 
ba£
 = 16;

228 
numbî
:

229 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

234 
	`putch
(
ch
, 
putd©
);

239 
	`putch
('%', 
putd©
);

240 
fmt
--; fmt[-1] != '%'; fmt--)

245 
	}
}

248 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...)

250 
va_li°
 
≠
;

252 
	`va_°¨t
(
≠
, 
fmt
);

253 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

254 
	`va_íd
(
≠
);

255 
	}
}

257 
	s•rötbuf
 {

258 *
	mbuf
;

259 *
	mebuf
;

260 
	m˙t
;

264 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
)

266 
b
->
˙t
++;

267 i‡(
b
->
buf
 < b->
ebuf
)

268 *
b
->
buf
++ = 
ch
;

269 
	}
}

272 
	$v¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, 
va_li°
 
≠
)

274 
•rötbuf
 
b
 = {
buf
, buf+
n
-1, 0};

276 i‡(
buf
 =
NULL
 || 
n
 < 1)

277  -
E_INVAL
;

280 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
≠
);

283 *
b
.
buf
 = '\0';

285  
b
.
˙t
;

286 
	}
}

289 
	$¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, ...)

291 
va_li°
 
≠
;

292 
rc
;

294 
	`va_°¨t
(
≠
, 
fmt
);

295 
rc
 = 
	`v¢¥ötf
(
buf
, 
n
, 
fmt
, 
≠
);

296 
	`va_íd
(
≠
);

298  
rc
;

299 
	}
}

	@lib/readline.c

1 
	~<öc/°dio.h
>

2 
	~<öc/îr‹.h
>

4 
	#BUFLEN
 1024

	)

5 
	gbuf
[
BUFLEN
];

8 
	$ªadlöe
(c⁄° *
¥om±
)

10 
i
, 
c
, 
echoög
;

12 i‡(
¥om±
 !
NULL
)

13 
	`˝rötf
("%s", 
¥om±
);

15 
i
 = 0;

16 
echoög
 = 
	`isc⁄s
(0);

18 
c
 = 
	`gëch¨
();

19 i‡(
c
 < 0) {

20 
	`˝rötf
("ªadÉº‹: %e\n", 
c
);

21  
NULL
;

22 } i‡((
c
 ='\b' || c ='\x7f'Ë&& 
i
 > 0) {

23 i‡(
echoög
)

24 
	`˝utch¨
('\b');

25 
i
--;

26 } i‡(
c
 >' ' && 
i
 < 
BUFLEN
-1) {

27 i‡(
echoög
)

28 
	`˝utch¨
(
c
);

29 
buf
[
i
++] = 
c
;

30 } i‡(
c
 == '\n' || c == '\r') {

31 i‡(
echoög
)

32 
	`˝utch¨
('\n');

33 
buf
[
i
] = 0;

34  
buf
;

37 
	}
}

	@lib/sockets.c

1 
	~<öc/lib.h
>

2 
	~<lwù/sockës.h
>

5 
	$ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

7  
	`nsùc_ac˚±
(
s
, 
addr
, 
addæí
);

8 
	}
}

11 
	$böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

13  
	`nsùc_böd
(
s
, 
«me
, 
«mñí
);

14 
	}
}

17 
	$shutdown
(
s
, 
how
)

19  
	`nsùc_shutdown
(
s
, 
how
);

20 
	}
}

23 
	$˛o£sockë
(
s
)

25  
	`nsùc_˛o£
(
s
);

26 
	}
}

29 
	$c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

31  
	`nsùc_c⁄√˘
(
s
, 
«me
, 
«mñí
);

32 
	}
}

35 
	$li°í
(
s
, 
backlog
)

37  
	`nsùc_li°í
(
s
, 
backlog
);

38 
	}
}

41 
	$ªcv
(
s
, *
mem
, 
Àn
, 
Êags
)

43  
	`nsùc_ªcv
(
s
, 
mem
, 
Àn
, 
Êags
);

44 
	}
}

47 
	$£nd
(
s
, c⁄° *
d©≠å
, 
size
, 
Êags
)

49  
	`nsùc_£nd
(
s
, 
d©≠å
, 
size
, 
Êags
);

50 
	}
}

53 
	$sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

55  
	`nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

56 
	}
}

	@lib/string.c

3 
	~<öc/°rög.h
>

9 
	#ASM
 1

	)

12 
	$°æí
(c⁄° *
s
)

14 
n
;

16 
n
 = 0; *
s
 != '\0'; s++)

17 
n
++;

18  
n
;

19 
	}
}

22 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
size
)

24 
n
;

26 
n
 = 0; 
size
 > 0 && *
s
 != '\0'; s++, size--)

27 
n
++;

28  
n
;

29 
	}
}

32 
	$°r˝y
(*
d°
, c⁄° *
§c
)

34 *
ªt
;

36 
ªt
 = 
d°
;

37 (*
d°
++ = *
§c
++) != '\0')

39  
ªt
;

40 
	}
}

43 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
) {

44 
size_t
 
i
;

45 *
ªt
;

47 
ªt
 = 
d°
;

48 
i
 = 0; i < 
size
; i++) {

49 *
d°
++ = *
§c
;

51 i‡(*
§c
 != '\0')

52 
§c
++;

54  
ªt
;

55 
	}
}

57 
size_t


58 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

60 *
d°_ö
;

62 
d°_ö
 = 
d°
;

63 i‡(
size
 > 0) {

64 --
size
 > 0 && *
§c
 != '\0')

65 *
d°
++ = *
§c
++;

66 *
d°
 = '\0';

68  
d°
 - 
d°_ö
;

69 
	}
}

72 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

74 *
p
 && *∞=*
q
)

75 
p
++, 
q
++;

76  (Ë((Ë*
p
 - (Ë*
q
);

77 
	}
}

80 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
size_t
 
n
)

82 
n
 > 0 && *
p
 && *∞=*
q
)

83 
n
--, 
p
++, 
q
++;

84 i‡(
n
 == 0)

87  (Ë((Ë*
p
 - (Ë*
q
);

88 
	}
}

93 
	$°rchr
(c⁄° *
s
, 
c
)

95 ; *
s
; s++)

96 i‡(*
s
 =
c
)

97  (*Ë
s
;

99 
	}
}

104 
	$°rföd
(c⁄° *
s
, 
c
)

106 ; *
s
; s++)

107 i‡(*
s
 =
c
)

109  (*Ë
s
;

110 
	}
}

112 #i‡
ASM


114 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

116 *
p
;

118 i‡(
n
 == 0)

119  
v
;

120 i‡(()
v
%4 =0 && 
n
%4 == 0) {

121 
c
 &= 0xFF;

122 
c
 = (c<<24)|(c<<16)|(c<<8)|c;

123 
asm
 volatile("cld;Ñep stosl\n"

124 :: "D" (
v
), "a" (
c
), "c" (
n
/4)

127 
asm
 volatile("cld;Ñep stosb\n"

128 :: "D" (
v
), "a" (
c
), "c" (
n
)

130  
v
;

131 
	}
}

134 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

136 c⁄° *
s
;

137 *
d
;

139 
s
 = 
§c
;

140 
d
 = 
d°
;

141 i‡(
s
 < 
d
 && s + 
n
 > d) {

142 
s
 +
n
;

143 
d
 +
n
;

144 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

145 
asm
 volatile("std;Ñep movsl\n"

146 :: "D" (
d
-4), "S" (
s
-4), "c" (
n
/4) : "cc", "memory");

148 
asm
 volatile("std;Ñep movsb\n"

149 :: "D" (
d
-1), "S" (
s
-1), "c" (
n
) : "cc", "memory");

151 
asm
 volatile("cld" ::: "cc");

153 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

154 
asm
 volatile("cld;Ñep movsl\n"

155 :: "D" (
d
), "S" (
s
), "c" (
n
/4) : "cc", "memory");

157 
asm
 volatile("cld;Ñep movsb\n"

158 :: "D" (
d
), "S" (
s
), "c" (
n
) : "cc", "memory");

160  
d°
;

161 
	}
}

166 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

168 *
p
;

169 
m
;

171 
p
 = 
v
;

172 
m
 = 
n
;

173 --
m
 >= 0)

174 *
p
++ = 
c
;

176  
v
;

177 
	}
}

182 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

184 c⁄° *
s
;

185 *
d
;

187 
s
 = 
§c
;

188 
d
 = 
d°
;

189 i‡(
s
 < 
d
 && s + 
n
 > d) {

190 
s
 +
n
;

191 
d
 +
n
;

192 
n
-- > 0)

193 *--
d
 = *--
s
;

195 
n
-- > 0)

196 *
d
++ = *
s
++;

198  
d°
;

199 
	}
}

205 
	$mem˝y
(*
d°
, *
§c
, 
size_t
 
n
)

207  
	`memmove
(
d°
, 
§c
, 
n
);

208 
	}
}

211 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

213 c⁄° 
uöt8_t
 *
s1
 = (c⁄° uöt8_à*Ë
v1
;

214 c⁄° 
uöt8_t
 *
s2
 = (c⁄° uöt8_à*Ë
v2
;

216 
n
-- > 0) {

217 i‡(*
s1
 !*
s2
)

218  (Ë*
s1
 - (Ë*
s2
;

219 
s1
++, 
s2
++;

223 
	}
}

226 
	$memföd
(c⁄° *
s
, 
c
, 
size_t
 
n
)

228 c⁄° *
íds
 = (c⁄° *Ë
s
 + 
n
;

229 ; 
s
 < 
íds
; s++)

230 i‡(*(c⁄° *Ë
s
 =(Ë
c
)

232  (*Ë
s
;

233 
	}
}

236 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
)

238 
√g
 = 0;

239 
vÆ
 = 0;

242 *
s
 == ' ' || *s == '\t')

243 
s
++;

246 i‡(*
s
 == '+')

247 
s
++;

248 i‡(*
s
 == '-')

249 
s
++, 
√g
 = 1;

252 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x'))

253 
s
 +2, 
ba£
 = 16;

254 i‡(
ba£
 =0 && 
s
[0] == '0')

255 
s
++, 
ba£
 = 8;

256 i‡(
ba£
 == 0)

257 
ba£
 = 10;

261 
dig
;

263 i‡(*
s
 >= '0' && *s <= '9')

264 
dig
 = *
s
 - '0';

265 i‡(*
s
 >= 'a' && *s <= 'z')

266 
dig
 = *
s
 - 'a' + 10;

267 i‡(*
s
 >= 'A' && *s <= 'Z')

268 
dig
 = *
s
 - 'A' + 10;

271 i‡(
dig
 >
ba£
)

273 
s
++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

277 i‡(
íd±r
)

278 *
íd±r
 = (*Ë
s
;

279  (
√g
 ? -
vÆ
 : val);

280 
	}
}

	@
1
.
0
28
365
boot/main.c
inc/assert.h
inc/elf.h
inc/error.h
inc/kbdreg.h
inc/malloc.h
inc/memlayout.h
inc/mmu.h
inc/queue.h
inc/stab.h
inc/stdarg.h
inc/stdio.h
inc/string.h
inc/types.h
inc/x86.h
kern/console.c
kern/console.h
kern/init.c
kern/kdebug.c
kern/kdebug.h
kern/monitor.c
kern/monitor.h
kern/printf.c
lib/nsipc.c
lib/printfmt.c
lib/readline.c
lib/sockets.c
lib/string.c
